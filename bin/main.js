// Generated by Haxe 4.3.2
(function ($global) { "use strict";
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class MainNode {
	constructor() {
		console.log("src/MainNode.hx:13:","MainNode");
		this.init();
	}
	init() {
		this.initFolders();
		this.dummyQR();
		this.generateQR4Attendees();
	}
	initFolders() {
		const_Folder.ROOT_FOLDER = process.cwd();
		const_Folder.BIN = haxe_io_Path.join([process.cwd(),"bin"]);
		const_Folder.DIST = haxe_io_Path.join([process.cwd(),"dist"]);
		const_Folder.ASSETS = haxe_io_Path.join([process.cwd(),"assets"]);
		const_Folder.EXPORT = haxe_io_Path.join([process.cwd(),"export"]);
		let v = "Folder.ROOT_FOLDER: " + const_Folder.ROOT_FOLDER;
		let tab = 1;
		if(tab == null) {
			tab = 0;
		}
		let t = "";
		let _g = 0;
		let _g1 = tab;
		while(_g < _g1) {
			let i = _g++;
			t += logger_Logger.TAB;
		}
		let v1 = "" + t + logger_Colors.BLUE + "♥ " + logger_Colors.GREEN + Std.string(v) + logger_Colors.RESET;
		process.stdout.write(Std.string(v1));
		process.stdout.write("\n");
		let v2 = const_Folder.BIN;
		let tab1 = 1;
		if(tab1 == null) {
			tab1 = 0;
		}
		let t1 = "";
		let _g2 = 0;
		let _g3 = tab1;
		while(_g2 < _g3) {
			let i = _g2++;
			t1 += logger_Logger.TAB;
		}
		let v3 = "" + t1 + logger_Colors.BLUE + "♥ " + logger_Colors.GREEN + Std.string(v2) + logger_Colors.RESET;
		process.stdout.write(Std.string(v3));
		process.stdout.write("\n");
		let v4 = const_Folder.DIST;
		let tab2 = 1;
		if(tab2 == null) {
			tab2 = 0;
		}
		let t2 = "";
		let _g4 = 0;
		let _g5 = tab2;
		while(_g4 < _g5) {
			let i = _g4++;
			t2 += logger_Logger.TAB;
		}
		let v5 = "" + t2 + logger_Colors.BLUE + "♥ " + logger_Colors.GREEN + Std.string(v4) + logger_Colors.RESET;
		process.stdout.write(Std.string(v5));
		process.stdout.write("\n");
		let v6 = "Folder.ASSETS: " + const_Folder.ASSETS;
		let tab3 = 1;
		if(tab3 == null) {
			tab3 = 0;
		}
		let t3 = "";
		let _g6 = 0;
		let _g7 = tab3;
		while(_g6 < _g7) {
			let i = _g6++;
			t3 += logger_Logger.TAB;
		}
		let v7 = "" + t3 + logger_Colors.BLUE + "♥ " + logger_Colors.GREEN + Std.string(v6) + logger_Colors.RESET;
		process.stdout.write(Std.string(v7));
		process.stdout.write("\n");
		let v8 = "Folder.EXPORT: " + const_Folder.EXPORT;
		let tab4 = 1;
		if(tab4 == null) {
			tab4 = 0;
		}
		let t4 = "";
		let _g8 = 0;
		let _g9 = tab4;
		while(_g8 < _g9) {
			let i = _g8++;
			t4 += logger_Logger.TAB;
		}
		let v9 = "" + t4 + logger_Colors.BLUE + "♥ " + logger_Colors.GREEN + Std.string(v8) + logger_Colors.RESET;
		process.stdout.write(Std.string(v9));
		process.stdout.write("\n");
		sys_FileSystem.createDirectory(const_Folder.EXPORT);
		sys_FileSystem.createDirectory(const_Folder.EXPORT + "/test");
		sys_FileSystem.createDirectory(const_Folder.EXPORT + "/qr");
	}
	generateQR4Attendees() {
		let content = js_node_Fs.readFileSync("data/attendees_00100.json",{ encoding : "utf8"});
		let attendeesArr = JSON.parse(content).attendees;
		let v = attendeesArr.length;
		let t = "";
		let _g = 0;
		let _g1 = 0;
		while(_g < _g1) {
			let i = _g++;
			t += logger_Logger.TAB;
		}
		let v1 = "" + t + logger_Colors.BLUE + "→ " + logger_Colors.WHITE + Std.string(v) + logger_Colors.RESET;
		process.stdout.write(Std.string(v1));
		process.stdout.write("\n");
		let _g2 = 0;
		let _g3 = attendeesArr.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let _attendees = attendeesArr[i];
			this.createQRCodes(_attendees,i);
		}
	}
	createQRCodes(attendee,i) {
		let str = "00000";
		let temp = str.length - ("" + i).length;
		let newID = HxOverrides.substr(str,0,temp) + i;
		let svg = new QrcodeSvg({ content : "" + attendee.userName, padding : 4, width : 256, height : 256, color : "#000000", background : "#ffffff", ecl : "M"}).svg();
		js_node_Fs.writeFileSync("" + const_Folder.EXPORT + "/qr/" + newID + "_qr_" + attendee.userName + ".svg",svg);
	}
	dummyQR() {
		let qrcode = new QrcodeSvg({ content : "http://github.com/", padding : 4, width : 256, height : 256, color : "#000000", background : "#ffffff", ecl : "M"});
		qrcode.save("sample.svg",function(error) {
			if(error != null) {
				throw error;
			}
			$global.console.log("Done!");
		});
	}
	static main() {
		let app = new MainNode();
	}
}
MainNode.__name__ = true;
Math.__name__ = true;
var QrcodeSvg = require("qrcode-svg");
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class const_Folder {
}
const_Folder.__name__ = true;
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
}
haxe_Exception.__name__ = true;
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
class haxe_io_Path {
	static join(paths) {
		let _g = [];
		let _g1 = 0;
		let _g2 = paths;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			if(v != null && v != "") {
				_g.push(v);
			}
		}
		let paths1 = _g;
		if(paths1.length == 0) {
			return "";
		}
		let path = paths1[0];
		let _g3 = 1;
		let _g4 = paths1.length;
		while(_g3 < _g4) {
			let i = _g3++;
			path = haxe_io_Path.addTrailingSlash(path);
			path += paths1[i];
		}
		return haxe_io_Path.normalize(path);
	}
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let tmp = target.join(slash);
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g_offset = 0;
		let _g_s = tmp;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
	static addTrailingSlash(path) {
		if(path.length == 0) {
			return "/";
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			if(c2 != path.length - 1) {
				return path + "\\";
			} else {
				return path;
			}
		} else if(c1 != path.length - 1) {
			return path + "/";
		} else {
			return path;
		}
	}
}
haxe_io_Path.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var js_node_Fs = require("fs");
var js_node_Path = require("path");
class logger_Colors {
}
logger_Colors.__name__ = true;
class logger_Logger {
}
logger_Logger.__name__ = true;
class sys_FileSystem {
	static createDirectory(path) {
		try {
			js_node_Fs.mkdirSync(path);
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "ENOENT") {
				sys_FileSystem.createDirectory(js_node_Path.dirname(path));
				js_node_Fs.mkdirSync(path);
			} else {
				let stat;
				try {
					stat = js_node_Fs.statSync(path);
				} catch( _g ) {
					throw e;
				}
				if(!stat.isDirectory()) {
					throw e;
				}
			}
		}
	}
}
sys_FileSystem.__name__ = true;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.__name__ = true;
	Array.__name__ = true;
}
js_Boot.__toStr = ({ }).toString;
logger_Colors.RESET = "\x1B[0m";
logger_Colors.GREEN = "\x1B[0;32m";
logger_Colors.BLUE = "\x1B[0;34m";
logger_Colors.WHITE = "\x1B[0;37m";
logger_Logger.TAB = "    ";
MainNode.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
